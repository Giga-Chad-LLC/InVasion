// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr PlayerAction::PlayerAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_pressed_(0)
{}
struct PlayerActionDefaultTypeInternal {
  constexpr PlayerActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerActionDefaultTypeInternal() {}
  union {
    PlayerAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerActionDefaultTypeInternal _PlayerAction_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_player_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_player_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_player_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_player_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerAction, key_pressed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PlayerAction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerAction_default_instance_),
};

const char descriptor_table_protodef_player_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014player.proto\"\360\001\n\014PlayerAction\022)\n\013key_p"
  "ressed\030\001 \001(\0162\024.PlayerAction.Action\"\264\001\n\006A"
  "ction\022\010\n\004Idle\020\000\022\021\n\rStartMovingUp\020\001\022\024\n\020St"
  "artMovingRight\020\002\022\023\n\017StartMovingDown\020\003\022\023\n"
  "\017StartMovingLeft\020\004\022\020\n\014StopMovingUp\020\005\022\023\n\017"
  "StopMovingRight\020\006\022\022\n\016StopMovingDown\020\007\022\022\n"
  "\016StopMovingLeft\020\010b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_player_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_2eproto = {
  false, false, 265, descriptor_table_protodef_player_2eproto, "player.proto", 
  &descriptor_table_player_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_player_2eproto::offsets,
  file_level_metadata_player_2eproto, file_level_enum_descriptors_player_2eproto, file_level_service_descriptors_player_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_player_2eproto_getter() {
  return &descriptor_table_player_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_player_2eproto(&descriptor_table_player_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerAction_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_player_2eproto);
  return file_level_enum_descriptors_player_2eproto[0];
}
bool PlayerAction_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerAction_Action PlayerAction::Idle;
constexpr PlayerAction_Action PlayerAction::StartMovingUp;
constexpr PlayerAction_Action PlayerAction::StartMovingRight;
constexpr PlayerAction_Action PlayerAction::StartMovingDown;
constexpr PlayerAction_Action PlayerAction::StartMovingLeft;
constexpr PlayerAction_Action PlayerAction::StopMovingUp;
constexpr PlayerAction_Action PlayerAction::StopMovingRight;
constexpr PlayerAction_Action PlayerAction::StopMovingDown;
constexpr PlayerAction_Action PlayerAction::StopMovingLeft;
constexpr PlayerAction_Action PlayerAction::Action_MIN;
constexpr PlayerAction_Action PlayerAction::Action_MAX;
constexpr int PlayerAction::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PlayerAction::_Internal {
 public:
};

PlayerAction::PlayerAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerAction)
}
PlayerAction::PlayerAction(const PlayerAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_pressed_ = from.key_pressed_;
  // @@protoc_insertion_point(copy_constructor:PlayerAction)
}

void PlayerAction::SharedCtor() {
key_pressed_ = 0;
}

PlayerAction::~PlayerAction() {
  // @@protoc_insertion_point(destructor:PlayerAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerAction::ArenaDtor(void* object) {
  PlayerAction* _this = reinterpret_cast< PlayerAction* >(object);
  (void)_this;
}
void PlayerAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_pressed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerAction.Action key_pressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_key_pressed(static_cast<::PlayerAction_Action>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerAction.Action key_pressed = 1;
  if (this->_internal_key_pressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key_pressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerAction)
  return target;
}

size_t PlayerAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerAction.Action key_pressed = 1;
  if (this->_internal_key_pressed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_pressed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerAction::GetClassData() const { return &_class_data_; }

void PlayerAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerAction *>(to)->MergeFrom(
      static_cast<const PlayerAction &>(from));
}


void PlayerAction::MergeFrom(const PlayerAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key_pressed() != 0) {
    _internal_set_key_pressed(from._internal_key_pressed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAction::CopyFrom(const PlayerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAction::IsInitialized() const {
  return true;
}

void PlayerAction::InternalSwap(PlayerAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_pressed_, other->key_pressed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PlayerAction* Arena::CreateMaybeMessage< ::PlayerAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerAction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
